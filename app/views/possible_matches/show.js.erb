
$('#possible_matches').html("<%= escape_javascript(render('show_possibilities'), locals: {possible_matches: @contemplated_piece , @suggested_pieces}%>")
(function(){
	var app = angular.module('GodsOfRiotry', ['ngRoute', 'ngAnimate']);

	app.controller('PossibleMatches', ['$scope', '$rootScope', '$timeout', '$interval', '$sce', 
					   function($scope, $rootScope, $timeout, $interval, $sce){
					   	
					   	$scope.suggested_tops = function(){
					   		
					   		suggested_tops = new Array();

					   		function upload(){
						   		
						   		for(i = 0; i < (gon.possible_matches_suggested_tops).length; i++){
							   		this.suggested_tops += {
							   			id: gon.possible_matches_suggested_tops[i].id,
							   			image: gon.possible_match_suggested_tops[i].image.picture,
							   			price: gon.possible_match_suggested_tops[i].price,
				  						description: gon.possible_matches_suggested_tops[i].description,
				  						merch_type: gon.possible_matches_suggested_tops[i].merch_type,
				  						standalone: gon.possible_matches_suggested_tops[i].standalone
							   		}
							   	}
							}   	
							return upload();
					   	};

					   	$scope.suggested_bottoms = function(){
					   			
					   			suggested_bottoms = new Array();

					   			function upload(){

					   				for (i = 0; i < (gon.possible_matches_suggested_bottoms).length; i++){
					   					this.suggested_bottoms += {
					   						id: gon.possible_matches_suggested_bottoms[i].id,
					   						image: gon.possible_matches_suggested_bottoms[i].image.picture,
					   						price: gon.possible_matches_suggested_bottoms[i].price,
					   						description: gon.possible_matches_suggested_bottoms[i].description,
					   						merch_type: gon.possible_matches_suggested_bottoms[i].merch_type,
					   						standalone: gon.possible_matches_suggested_bottoms[i].standalone
					   					}
					   				}
					   			}

					   			return upload();
					   	};


					   	$scope.tops = function(){
					   			
					   			tops = new Array;					   			

					   			function upload(){

					   				for(i=0; i < gon.possible_matches_suggested_tops; i++){
					   					this.tops += {
					   						id: gon.possible_matches_suggested_tops[i].id,
					   						image: gon.possible_matches_suggested_tops[i].image.picture,
					   						price: gon.possible_matches_suggested_tops[i].price,
					   						description: gon.possible_matches_suggested_tops[i].description,
					   						merch_type: gon.possible_matches_suggested_tops[i].merch_type,
					   						standalone: gon.possible_matches_suggested_tops[i].standalone
					   					}
					   				}

					   				for(i = 0; i < gon.possible_matches_extra_tops; i++){
					   					this.tops += {
					   					 	id: gon.possible_matches_extra_tops[i].id,
					   					 	image: gon.possible_matches_extra_tops[i].image.picture,
					   					 	price: gon.possible_matches_extra_tops[i].price,
					   					 	description: gon.possible_matches_extra_tops[i].description,
					   					 	merch_type: gon.possible_matches_extra_tops[i].merch_type,
					   					 	standalone: gon.possible_matches_extra_tops[i].standalone
					   					}
					   				}

					   				for(i = 0; i < gon.gor_clothing_standalone_tops; i++){
					   					this.tops += {
					   						id: gon.gor_clothing_standalone_tops[i].id,
					   						image: gon.gor_clothing_standalone_tops[i].image.picture,
					   						price: gon.gor_clothing_standalone_tops[i].price,
					   						description: gon.gor_clothing_standalone_tops[i].description,
					   						merch_type: gon.gor_clothing_standalone_tops[i].merch_type,
					   						standalone: gon.gor_clothing_standalone_tops[i].standalone
					   					}
					   				}

					   				return upload();
					   	};

					   	$scope.bottoms = function(){
					   			
					   			bottoms = new Array;

					   			function upload(){

					   				for (i = 0; i < gon.possible_match_suggested_bottoms.length; i++){
						   				this.bottoms += {
						   					id: gon.possible_match_suggested_bottoms[i].id,
						   					image: gon.possible_match_suggested_bottoms[i].image.picture,
						   					price: gon.possible_match_suggested_bottoms[i].price,
						   					description: gon.possible_match_suggested_bottoms[i].description,
						   					merch_type: gon.possible_match_suggested_bottoms[i].merch_type,
						   					standalone: gon.possible_match_suggested_bottoms[i].standalone
						   				}
						   			}	

						   			for (i = 0; i < gon.possible_matches_extra_bottoms.length; i++){
						   				this.bottoms += {
						   					id: gon.possible_matches_extra_bottoms[i].id,
						   					image: gon.possible_matches_extra_bottoms[i].image.picture,
						   					price: gon.possible_matches_extra_bottoms[i].price,
						   					description: gon.possible_matches_extra_bottoms[i].description,
						   					merch_type: gon.possible_matches_extra_bottoms[i].merch_type,
						   					standalone: gon.possible_matches_extra_bottoms[i].standalone
						   				}
						   			}

						   			for(i = 0; i < gon.gor_clothing_standalone_bottoms.length; i++){
						   				this.bottoms += {
						   					id: gon.gor_clothing_standalone_bottoms[i].id,
						   					image: gon.gor_clothing_standalone_bottoms[i].image.picture,
						   					price: gon.gor_clothing_standalone_bottoms[i].price,
						   					description: gon.gor_clothing_standalone_bottoms[i].description,
						   					merch_type: gon.gor_clothing_standalone_bottoms[i].merch_type,
						   					standalone: gon.gor_clothing_standalone_bottoms[i].standalone
						   				}
						   			}

						   		}

						   		return upload();
						};
					   

					   	$scope.contemplated_piece = function(){

					   		contemplated_piece = new Array;

						   	function upload(){
					   			
					   			this.contemplated_piece += {
						   			id: gon.contemplated_piece.id, 
						   			image: gon.contemplated_piece.image.picture,
						   			price: gon.contemplated_piece.price,
						   			description: gon.contemplated_piece.description,
						   			merch_type: gon.contemplated_piece.merch_type,
						   			standalone: gon.contemplated_piece.standalone
					   			}
						   	}
						   	return upload();
					   	};
					   	

						$rootScope.temporary_matches = function(){
							if (angular.isDefined(initiateAutomaticToggle))
								return;
							
							var id = angular.element(document).find('#contemplated_piece_<%=@contemplated_piece.id%>').attr('id');
							var path = Routes.possible_match_path(id);
							angular.element.post(path);

							//JsRoutes --> make element a contemplated_piece
							temporary_matches = new Array;

							initiateAutomaticToggle = function(){

								this.temporary_matches += {id: $scope.suggested_piece.id,
									   image: $scope.suggested_piece.image.picture,
									   price: $scope.suggested_piece.price,
									   description: $scope.suggested_piece.description,
									   merch_type: $scope.suggested_piece.merch_type
								}

								var array = $scope.suggested_pieces;

								for(i = 0; i < array.length - 1; i++){
									this.temporary_matches += {
										id: array[i].id,
										image: array[i].image.picture,
										price: array[i].price,
										description: array[i].description,
										merch_type: array[i].merch_type
									}
								}
							};

							return initiateAutomaticToggle();


						   	$timeout(function(){
						   		$scope.suggested_piece = array[array.length - 1];
						   	}, 100);

						   	var index = 0;

						   	var ToggleSuggPieces;
						   	ToggleSuggPieces = $interval(function(){
						   		if(index > array.length - 1){
						   			index = 0;
						   		}
						   		$scope.suggested_piece = array[index];
						   		index++;
						   	}, 8000);

						   	var array = $scope.suggested_pieces;

						}

						$scope.stopAutomaticToggle = function(){
								if (angular.isDefined(initiateAutomaticToggle)){
									$interval.cancel(initiateAutomaticToggle);
									initiateAutomaticToggle = undefined;
								}
						}

						$scope.$on('$destroy', function(){
							$scope.stopAutomaticToggle();
						});


					   }]);


						function placeholder(){
							var element = this,
						
							temp = {suggested_pieces: function(){
											if (angular.element('#non_suggested_bottom_<%= gor_clothing.id %>').length){
												return element.find('#non_suggested_bottom_<%= gor_clothing.id %>');
											}
										          else if (angular.element('#non_suggested_top_<%= gor_clothing.id %>').length){
										         		return element.find('#non_suggested_top_<%= gor_clothing.id %>');
											}
											else if (angular.element('#suggested_piece_<%= suggested_piece.id %>').length){
										         		return element.find('#suggested_piece_<%= suggested_piece.id %>');
											}
											else 
												return false;
										          }(),
								  contemplated_piece: function(){
								  			if (angular.element('#contemplated_piece_<%=@contemplated_piece.id%>').length){
												return true;
											}
											else 
												return false;
										          }(),
								  standalone_tops: function(){
								  			if (angular.element('#standalone_tops_<%= gor_clothing.id%>').length){
								  				return true;
								  			}
								  			else
								  				return false;
								  		          }(),
								  standalone_bottoms: function(){
								  			if (angular.element('#standalone_bottoms_<%= gor_clothing.id %>').length){
								  				return true;
								  			}
								  			else
								  				return false;
								  		          }()
							};				    
							
							switch(temp){
								case temp.suggested_pieces:
								break;

								case temp.contemplated_piece:
									timeout(function(){
										$scope.temporary_matches();
										if 
										  
									}, 6000);
								break;

								case temp.standalone_tops:
								break;

								case temp.standalone_bottoms:
								break;

								default:
							}
						}

						$('#possible_matches').keydown(function(e) {
							
						    $scope.stopAutomaticToggle();

						    switch(e.which) {
						        case 37: // left
						        break;

						        case 38: // up
						        break;

						        case 39: // right
						        break;

						        case 40: // down
						        break;

						        default: return; // exit this handler for other keys
						    }
						    e.preventDefault(); // prevent the default action (scroll / move caret)
						});

	app.animation('.possible_pieces', ['$timeout', '$rootScope' function($timeout){

		return {


			enter: function(element, done){

				var img = angular.element(element.children()[0]);
				var price = angular.element(element.children()[1]);
				var description = angular.element(element.children()[2]);
				angular.element(element.toggleClass('#contemplated_piece_<%=@contemplated_piece%>'));
				$rootScope.temporary_matches();

				img.css({
					opacity: 0
				});
				price.css({
					opacity: 0
				});
				description.css({
					opacity: 0
				});
				img.animate({
					opacity: 1
				}, 500, function(){
					var eventfire = false;
					img.on('mouseover', function(){
						eventfire = true;
						price.css({opacity: 1});
						description.css({opacity: 1});
					}).off('mouseover', function(){
						price.css({opacity: 0});
						description.css({opacity: 0});
					});
						//Show reminder to user
						
				}());
			},

			leave: function(element, done){

				var img = angular.element(element.children()[0]);
				var price = angular.element(element.children()[1]);
				var description = angular.element(element.children()[2]);

				img.css({
					opacity: 1
				});

				img.animate({
					opacity: 0
				}, 500);

				if angular.element(element.hasClass('#contemplated_piece_<%=@contemplated_piece.id%>')){
					angular.element(element.removeClass('#contemplated_piece_<%=@contemplated_piece.id%>'));
				}	

			}
		};
	}]);
})();
<%end%>

