<% content_for :show do %>
$('#possible_matches').html("<%= escape_javascript(render('show_possibilities'), locals: {possible_matches: @contemplated_piece , @suggested_pieces}%>")
(function(){
	var app = angular.module('GodsOfRiotry', ['ngRoute', 'ngAnimate']);

	app.controller('PossibleMatches', ['$scope', '$timeout', '$interval', '$sce', 
					   function($scope, $timeout, $interval, $sce){
					   	

					   	$scope.suggested_tops = function(){
					   		
					   		suggested_tops = new Array();

					   		function upload(){
						   		
						   		for(i = 0; i < (gon.possible_matches_suggested_tops).length; i++){
							   		this.suggested_tops += {
							   			id: gon.possible_matches_suggested_tops[i].id,
							   			image: gon.possible_match_suggested_tops[i].image.picture,
							   			price: gon.possible_match_suggested_tops[i].price,
				  						description: gon.possible_matches_suggested_tops[i].description,
				  						merch_type: gon.possible_matches_suggested_tops[i].merch_type,
				  						standalone: gon.possible_matches_suggested_tops[i].standalone
							   		}
							   	}
							}();   	
							return this.suggested_tops;
					   	};

					   	$scope.suggested_bottoms = function(){
					   			
					   			suggested_bottoms = new Array();

					   			function upload(){

					   				for (i = 0; i < (gon.possible_matches_suggested_bottoms).length; i++){
					   					this.suggested_bottoms += {
					   						id: gon.possible_matches_suggested_bottoms[i].id,
					   						image: gon.possible_matches_suggested_bottoms[i].image.picture,
					   						price: gon.possible_matches_suggested_bottoms[i].price,
					   						description: gon.possible_matches_suggested_bottoms[i].description,
					   						merch_type: gon.possible_matches_suggested_bottoms[i].merch_type,
					   						standalone: gon.possible_matches_suggested_bottoms[i].standalone
					   					}
					   				}
					   			}();
					   			return this.suggested_bottoms;
					   	};


					   	$scope.tops = function(){
					   			
					   			tops = new Array;					   			

					   			function upload(){

						   				for(i=0; i < gon.possible_matches_suggested_tops; i++){
						   					this.tops += {
						   						id: gon.possible_matches_suggested_tops[i].id,
						   						image: gon.possible_matches_suggested_tops[i].image.picture,
						   						price: gon.possible_matches_suggested_tops[i].price,
						   						description: gon.possible_matches_suggested_tops[i].description,
						   						merch_type: gon.possible_matches_suggested_tops[i].merch_type,
						   						standalone: gon.possible_matches_suggested_tops[i].standalone
						   					}
						   				}

						   				for(i = 0; i < gon.possible_matches_extra_tops; i++){
						   					this.tops += {
						   					 	id: gon.possible_matches_extra_tops[i].id,
						   					 	image: gon.possible_matches_extra_tops[i].image.picture,
						   					 	price: gon.possible_matches_extra_tops[i].price,
						   					 	description: gon.possible_matches_extra_tops[i].description,
						   					 	merch_type: gon.possible_matches_extra_tops[i].merch_type,
						   					 	standalone: gon.possible_matches_extra_tops[i].standalone
						   					}
						   				}

						   				for(i = 0; i < gon.gor_clothing_standalone_tops; i++){
						   					this.tops += {
						   						id: gon.gor_clothing_standalone_tops[i].id,
						   						image: gon.gor_clothing_standalone_tops[i].image.picture,
						   						price: gon.gor_clothing_standalone_tops[i].price,
						   						description: gon.gor_clothing_standalone_tops[i].description,
						   						merch_type: gon.gor_clothing_standalone_tops[i].merch_type,
						   						standalone: gon.gor_clothing_standalone_tops[i].standalone
						   					}
						   				}
					   			}();
					   			return this.tops;
					   	};

					   	$scope.bottoms = function(){
					   			
					   			bottoms = new Array;

					   			function upload(){

					   				for (i = 0; i < gon.possible_match_suggested_bottoms.length; i++){
						   				this.bottoms += {
						   					id: gon.possible_match_suggested_bottoms[i].id,
						   					image: gon.possible_match_suggested_bottoms[i].image.picture,
						   					price: gon.possible_match_suggested_bottoms[i].price,
						   					description: gon.possible_match_suggested_bottoms[i].description,
						   					merch_type: gon.possible_match_suggested_bottoms[i].merch_type,
						   					standalone: gon.possible_match_suggested_bottoms[i].standalone
						   				}
						   			}	

						   			for (i = 0; i < gon.possible_matches_extra_bottoms.length; i++){
						   				this.bottoms += {
						   					id: gon.possible_matches_extra_bottoms[i].id,
						   					image: gon.possible_matches_extra_bottoms[i].image.picture,
						   					price: gon.possible_matches_extra_bottoms[i].price,
						   					description: gon.possible_matches_extra_bottoms[i].description,
						   					merch_type: gon.possible_matches_extra_bottoms[i].merch_type,
						   					standalone: gon.possible_matches_extra_bottoms[i].standalone
						   				}
						   			}

						   			for(i = 0; i < gon.gor_clothing_standalone_bottoms.length; i++){
						   				this.bottoms += {
						   					id: gon.gor_clothing_standalone_bottoms[i].id,
						   					image: gon.gor_clothing_standalone_bottoms[i].image.picture,
						   					price: gon.gor_clothing_standalone_bottoms[i].price,
						   					description: gon.gor_clothing_standalone_bottoms[i].description,
						   					merch_type: gon.gor_clothing_standalone_bottoms[i].merch_type,
						   					standalone: gon.gor_clothing_standalone_bottoms[i].standalone
						   				}
						   			}

						   		}();

						   		return this.bottoms;
						};
					   

					   	$scope.contemplated_piece = function(){

					   		contemplated_piece = new Array;

						   	function upload(){
					   			
					   			this.contemplated_piece += {
						   			id: gon.contemplated_piece.id, 
						   			image: gon.contemplated_piece.image.picture,
						   			price: gon.contemplated_piece.price,
						   			description: gon.contemplated_piece.description,
						   			merch_type: gon.contemplated_piece.merch_type,
						   			standalone: gon.contemplated_piece.standalone
					   			}
						   	}();
						   	return this.contemplated_piece;
					   	};
					   	

						$scope.automatic_toggle = function(){ //create directive for this functionality
							if (angular.isDefined(initiateAutomaticToggle))
								return;

							jQuery.extend('possible_pieces', Routes);
							
							var id = angular.element(document).find('.contemplated_piece_<%=@contemplated_piece.id%> > a > a').attr('id');
							var path = Routes.possible_match_path(id);
							
							angular.element.post(path);

							//JsRoutes --> make element a contemplated_piece
							temporary_matches = new Array;

							$scope.tops.forEach(function(element){
								if (id in element)
									$scope.suggested_pieces = $scope.suggested_bottoms;
							};
							$scope.bottoms.forEach(function(element){
								if (id in element)
									$scope.suggested_pieces = $scope.suggested_tops;
							};
							

							initiateAutomaticToggle = function(){
								for (i = 0; i < $scope.suggested_pieces.length; i++){

									this.temporary_matches += {id: $scope.suggested_pieces[i].id,
										   image: $scope.suggested_pieces[i].image,
										   price: $scope.suggested_pieces[i].price,
										   description: $scope.suggested_pieces[i].description,
										   merch_type: $scope.suggested_pieces[i].merch_type
									}
								}
							};

							initiateAutomaticToggle();


							var array = this.temporary_matches;

						   	$timeout(function(){
						   		$scope.suggested_piece = array[array.length - 1];
						   	}, 100);

						   	var index = 0;

						   	$interval(function(){
						   		if (index > array.length - 1){
						   			index = 0;
						   		}

						   		$scope.suggested_piece = array[index];
						   		index++;			
						   	}, 6000);
						}


						$scope.stopAutomaticToggle = function(){
								if (angular.isDefined(initiateAutomaticToggle)){
									$interval.cancel(initiateAutomaticToggle);
									initiateAutomaticToggle = undefined;
								}
						}

						$scope.$on('$destroy', function(){
							$scope.stopAutomaticToggle();
						});


					   }]);
	

	app.directive('focusImage', ['$timeout', '$rootScope', '$animate', function($timeout, $rootScope, $animate){

					
			var possible_pieces = document.querySelectorAll('.possible_pieces');
			var non_suggested_bottoms;
			var non_suggested_tops;
			var standalone_bottoms;
			var standalone_tops;
			var suggested_bottoms;
			var suggested_tops;
			
			for(k = 0; k < possible_pieces.length; k++){
				if (possible_pieces[k].getAttributeName('id') == 'currently_contemplated')
					contemplated_piece += possible_pieces[k];
				else if (possible_pieces[k].getAttributeName('id') == 'currently_visible_bottom')
					suggested_bottoms += possible_pieces[k];
				else if (possible_pieces[k].getAttributeName('id') == 'currently_visible_top')
					suggested_tops += possible_pieces[k];
				else if (possible_pieces[k].getAttributeName('id') == 'currenly_visible_standalone_top')
					standalone_tops += possible_pieces[k];
				else if (possible_pieces[k].getAttributeName('id') == 'currently_visible_standalone_bottom')
					standalone_bottoms += possible_pieces[k];
				else if (possible_pieces[k].getAttributeName('id') == 'currently_visible_extra_top')
					non_suggested_tops += possible_pieces[k];
				else if (possible_pieces[k].getAttributeName('id') == 'currently_visible_extra_bottom')
					non_suggested_bottoms += possible_pieces[k];
				else
					break;
			}

			var TopArray;
			var BottomArray;


			function addToArray(arraylist, declaredArray){
				for(i = 0; i < arraylist.length; i++){
					declaredArray += arraylist[i];
				}
				return arraylist;
			}

			addToArray(suggested_tops, TopArray);
			addToArray(non_suggested_tops, TopArray);
			addToArray(standalone_tops, TopArray);

			addToArray(suggested_bottoms, BottomArray);
			addToArray(non_suggested_bottoms, BottomArray);
			addToArray(standalone_bottoms, BottomArray);

			var ActiveTop;
			var ActiveBottom;

			 	if (<%= @contemplated_piece.merch_type %> == 'bottom' && <%= @contemplated_piece.standalone %> == false){
					ActiveBottom = contemplated_piece;
					ActiveTop = suggested_tops[0];
					BottomArray.unshift(contemplated_piece)
				}
				else if (<%= @contemplated_piece.merch_type %> == 'top' && <%= @contemplated_piece.standalone %> == false){
					ActiveTop = contemplated_piece;
					ActiveBottom = suggested_bottoms[0];
					TopArray.unshift(contemplated_piece)
				}
				else {
					console.log('Read Differently');
				}

			
		return {
			link: function(scope, element, attrs){
				
				scope.toLeft = false;
				scope.toRight = false;

				parentNode = element.parent().parent().parent().parent();
				
				$timeout(function(){
					$animate.enter(ActiveTop, parentNode);
					$animate.enter(ActiveBottom, parentNode);
				});

				element.bind('keydown', function(event){
					if (event.which == 40 && ActiveTop == document.activeElement){
						$timeout(function(){
							ActiveBottom.focus();
						}).catch(function(err){
							console.log(err);
						});
					}
					else if (event.which == 38 && ActiveBottom == document.activeElement){
						$timeout(function(){
							ActiveTop.focus();
						}).catch(function(err){
							console.log(err);
						});
					}
					else if (event.which == 37 && ActiveTop == document.activeElement){
						for(i = 0; i < TopArray.length < 1; i++){
							if (ActiveTop == TopArray[i]){
								i--;
								if (i < 0){
								     i = TopArray.length - 1;
								}
								$timeout(function(){
									ActiveTop = TopArray[i];
									scope.toRight = false;
									scope.toLeft = true;
									$animate.enter(ActiveTop, parentNode);
									TopArray[i].focus();
								});
							}
							else
								continue;
						}
					}
					else if (event.which == 39 && ActiveTop == document.activeElement){
						for(i = 0; i < TopArray.length - 1; i++){
							if (ActiveTop == TopArray[i]){
								i++;
								if (i > TopArray.length - 1){
									i = 0;
								}
								$timeout(function(){
									ActiveTop = TopArray[i];
									scope.toLeft = false;
									scope.toRight = true;
									$animate.move(ActiveTop, parentNode);
									TopArray[i].focus();
								});
								break;
							}
							else
								continue;
						}
					}
					else if (event.which == 37 && ActiveBottom == document.activeElement){
						for(i = 0; i < BottomArray.length; i++){
							if (ActiveBottom == BottomArray[i]){
								i--;
								if (i < 0){
									i = BottomArray.length - 1;
								}
								timeout(function(){
									ActiveBottom = BottomArray[i];
									scope.toRight = false;
									scope.toLeft = true;
									$animate.enter(ActiveBottom, parentNode);
									BottomArray[i].focus();
								}).catch(function(err){
									console.log(err);
								})
								break;
							}
							else
								continue;
						}
					}
					else if (event.which == 39 && ActiveBottom == document.activeElement){
						for(i = 0; i < BottomArray.length - 1; i++){
							if (ActiveBottom == BottomArray[i]){
								i++;
								if (i > BottomArray.length - 1){
									i = 0;
								}
								timeout(function(){
									ActiveBottom = BottomArray[i];
									scope.toLeft = false;
									scope.toRight = true;
									$animate.move(ActiveBottom, parentNode);
									BottomArray[i].focus();
								}).catch(function(err){
									console.log(err);
								});
								break;
							}
							else
								continue;
						}
					}
					else
						return;
				});
			}
		}
	}]);
					


	app.animation('.possible_pieces', ['$timeout', function($timeout){

		return {


			enter: function(element, done){

				var img = angular.element(element.children()[0]);
				var price = angular.element(element.children()[1]);
				var description = angular.element(element.children()[2]);

				img.css({
					opacity: 0
				});
				price.css({
					opacity: 0
				});
				description.css({
					opacity: 0
				});
				img.animate(function(){
					img.on('mouseover', function(){
						price.css({opacity: 1});
						description.css({opacity: 1});
					}).off('mouseover', function(){
						price.css({opacity: 0});
						description.css({opacity: 0});
					});						
				}());
			},

			move: function(element, done){

				var img = angular.element(element.children()[0]);
				var price = angular.element(element.children()[1]);
				var description = angular.element(element.children()[2]);

				img.css({
					opacity: 0
				});
				price.css({
					opacity: 0
				});
				description.css({
					opacity: 0
				});
				img.animate(function(){
					img.on('mouseover', function(){
						price.css({opacity: 1});
						description.css({opacity: 1});
					}).off('mouseover', function(){
						price.css({opacity: 0});
						description.css({opacity: 0});
					});
				}());
			}
		};
	}]);
})();
<%end%>
